//EVENTOS DEL DOM

DOMSubtreeModified//cuando a√±adimos o eliminamos nodos en el sub√°rbol de un elemento o documento.
DOMNodeInserted//cuando a√±adimos un nodo hijo a un nodo padre.
DOMNodeRemoved//cuando eliminamos un nodo que tiene nodo padre.
DOMNodeRemovedFromDocument//cuando eliminamos un nodo del documento
DOMNodeInsertedIntoDocument//cuando a√±adimos un nodo al documento


/**
 * ¬°Por supuesto! Las **expresiones regulares (regex)** son patrones utilizados para buscar y manipular texto. Se usan en muchos lenguajes de programaci√≥n como Python, JavaScript, Java, y m√°s.

---

## **1. Conceptos b√°sicos**
Una expresi√≥n regular es una secuencia de caracteres especiales que representan un patr√≥n de b√∫squeda.  

Ejemplo b√°sico:  
La regex `hello` buscar√° la palabra `"hello"` en un texto.

---

## **2. Caracteres especiales**
| S√≠mbolo | Descripci√≥n | Ejemplo |
|---------|------------|---------|
| `.` | Cualquier car√°cter excepto nueva l√≠nea | `h.t` ‚Üí "hat", "hit", "hot" |
| `^` | Inicio de la l√≠nea | `^Hola` ‚Üí Encuentra "Hola" al inicio |
| `$` | Fin de la l√≠nea | `mundo$` ‚Üí Encuentra "mundo" al final |
| `*` | 0 o m√°s repeticiones | `ab*` ‚Üí "a", "ab", "abb", "abbb" |
| `+` | 1 o m√°s repeticiones | `ab+` ‚Üí "ab", "abb", "abbb" (pero no "a") |
| `?` | 0 o 1 repetici√≥n | `colou?r` ‚Üí "color" o "colour" |
| `{n,m}` | Entre `n` y `m` repeticiones | `a{2,4}` ‚Üí "aa", "aaa", "aaaa" |
| `[]` | Conjunto de caracteres permitidos | `[aeiou]` ‚Üí Encuentra cualquier vocal |
| `|` | Alternativa (OR) | `rojo|azul` ‚Üí "rojo" o "azul" |
| `()` | Agrupaci√≥n | `(abc)+` ‚Üí "abc", "abcabc", "abcabcabc" |

---

## **3. Clases de caracteres**
| Clase | Significado | Ejemplo |
|-------|------------|---------|
| `\d` | Cualquier d√≠gito (0-9) | `\d+` ‚Üí "123", "4567" |
| `\D` | Cualquier car√°cter NO num√©rico | `\D+` ‚Üí "Hola", "ABC" |
| `\w` | Cualquier letra, n√∫mero o guion bajo (`[a-zA-Z0-9_]`) | `\w+` ‚Üí "hola_123" |
| `\W` | Cualquier car√°cter NO `\w` | `\W+` ‚Üí " ,.;!" |
| `\s` | Cualquier espacio en blanco | `\s+` ‚Üí " " (espacio) |
| `\S` | Cualquier car√°cter NO en blanco | `\S+` ‚Üí "Hola123" |

---

## **4. Ejemplos en Python**
```python
import re

# Buscar una palabra en una cadena
texto = "Hola, mi n√∫mero es 123456."
patron = r"\d+"  # Busca n√∫meros

coincidencias = re.findall(patron, texto)
print(coincidencias)  # ['123456']
```

### **Reemplazar texto**
```python
texto = "La fecha es 2025-02-28."
patron = r"\d{4}-\d{2}-\d{2}"
nuevo_texto = re.sub(patron, "XX-XX-XX", texto)

print(nuevo_texto)  # "La fecha es XX-XX-XX."
```

### **Validar formato de email**
```python
patron_email = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
email = "ejemplo@correo.com"

if re.match(patron_email, email):
    print("Correo v√°lido")
else:
    print("Correo inv√°lido")
```

---

¬øTienes alg√∫n caso espec√≠fico en el que necesites usar regex? üòä
 */